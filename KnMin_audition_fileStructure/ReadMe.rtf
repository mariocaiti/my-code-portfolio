AUTHENTICATION PAGE LOGIN README

Which application did you choose to develop and why?
#3: The authentication server, because understanding and implementing security in every app we create is just not optional. However, neither is a positive UI/UX experience. So my goals with this exercise was to make a login process as intuitive and fast as possible.

How to use/test​ the provided application
The structure is as follows: 
The root file is km_audition.py. I created a Flask app by running the following terminal command:

virtualenv flask_app

The root file is in flask_app/bin, which contains important files to run the Flask framework.
The /bin directory must also include the following folders, subfolders, and files which serve the app:

/templates 
	_formhelpers.html (file for the other HTML view pages to include)
	login.html
	retrievePwd.html
	register.html
	private.html

/static
	/styles
		styles.css

/tests
	km_audition_tests.py
What Operating System (+ service pack) and libraries are required?
I chose Python from the options, which seems to have much better performance and reliability than PHP or node.js, currently. But I could be wrong.

Any design decisions or behavioral clarifications​ that illustrate how your program functions, and why?

If you use any external libraries or code-snippets, you must ​provide the following information for each (credit must be given)

I developed using the Flask framework to take out the heavy lifting and be able to concentrate on solving problems. 
For JWT implementation, I upgraded the library I was using to flask_jwt_extended, which makes generating tokens more reliable. References: https://pythonhosted.org/Flask-JWT/
Finally, I set up unit testing with Flask_testing, the basic library for unit testing, ay purest to run it.

Name
○ Version
○ Purpose
○ License
○ Website(s)
 
What tools/libraries (and versions) are necessary to use and test your application?





TASK LIST

1. Establishes an active session through the use of cookies upon successful login
	Done!

2. Returns a JWT (JSON Web Token) in the response				Done!

3. Provides a way to validate the JWT on server
	Tokens are established and controlled by the routing flow established in this file. I tested logging in and out with several dummy accounts.

4. Provides a way to logout in order to destroy the cookie and session
	Done!

EXTRA CREDIT

Implement two-factor authentication
	I am limited by security precautions on my house MacBook, which is not exactly a server! I have a plan as to how to use the available tools to do this, though, as outlined in the root file’s comments.

Store user information in a self contained database (e.g. SQLite, LevelDB, etc.)
	I prefer mySQL and have used it with Flask in the past. For this exercise, I did not get to set it up.

User account creation
	This works in the testing environment, and I tested creating and logging in with dummy accounts.

A client web page using the authentication service
	The app is based around the /private page which I tested logging in and out of.

Unit tests
	This file is in /tests. Instructions are in comments.


